import React, { useState } from 'react';
import {
  Animated,
  ScrollView,
  Text,
  TouchableOpacity,
  View
} from 'react-native';
import { AdminPopupStyles as styles } from '../styles/components/AdminPopup.styles';
import { CustomModal } from './CustomModal';

interface AdminAction {
  type: 'single' | 'bulk';
  title: string;
  description: string;
  amount?: number;
  user?: {
    fullName: string;
    phone: string;
    email: string;
  };
  users?: Array<{
    user: {
      fullName: string;
      phone: string;
    };
    amount: number;
  }>;
  onConfirm: () => void;
}

interface AdminPopupProps {
  visible: boolean;
  action: AdminAction | null;
  onClose: () => void;
}

export const AdminPopup: React.FC<AdminPopupProps> = ({
  visible,
  action,
  onClose,
}) => {
  const [fadeAnim] = useState(new Animated.Value(1));

  if (!action) return null;

  const formatMoney = (amount: number): string => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const renderSinglePayment = () => {
    if (!action.user || !action.amount) return null;

    return (
      <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
        <View style={styles.header}>
          <Text style={styles.title}>üí≥ G·ª≠i y√™u c·∫ßu thanh to√°n</Text>
          <Text style={styles.subtitle}>X√°c nh·∫≠n th√¥ng tin tr∆∞·ªõc khi g·ª≠i</Text>
        </View>

        <View style={styles.paymentCard}>
          <View style={styles.cardHeader}>
            <Text style={styles.cardTitle}>Th√¥ng tin thanh to√°n</Text>
          </View>
          
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Ng∆∞·ªùi nh·∫≠n:</Text>
            <Text style={styles.infoValue}>{action.user.fullName}</Text>
          </View>
          
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>S·ªë ƒëi·ªán tho·∫°i:</Text>
            <Text style={styles.infoValue}>{action.user.phone}</Text>
          </View>
          
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Email:</Text>
            <Text style={styles.infoValue}>{action.user.email}</Text>
          </View>
          
          <View style={styles.divider} />
          
          <View style={styles.amountSection}>
            <Text style={styles.amountLabel}>S·ªë ti·ªÅn c·∫ßn thanh to√°n:</Text>
            <Text style={styles.amountValue}>{formatMoney(action.amount)}</Text>
          </View>
          
          <View style={styles.descriptionSection}>
            <Text style={styles.descriptionLabel}>M√¥ t·∫£:</Text>
            <Text style={styles.descriptionValue}>{action.description}</Text>
          </View>
        </View>

        <View style={styles.buttonContainer}>
          <TouchableOpacity 
            style={[styles.button, styles.cancelButton]} 
            onPress={onClose}
          >
            <Text style={styles.cancelButtonText}>‚ùå H·ªßy</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.button, styles.confirmButton]} 
            onPress={() => {
              action.onConfirm();
              onClose();
            }}
          >
            <Text style={styles.confirmButtonText}>üì§ G·ª≠i y√™u c·∫ßu</Text>
          </TouchableOpacity>
        </View>
      </Animated.View>
    );
  };

  const renderBulkPayment = () => {
    if (!action.users) return null;

    const totalAmount = action.users.reduce((sum, req) => sum + req.amount, 0);

    return (
      <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
        <View style={styles.header}>
          <Text style={styles.title}>üì§ G·ª≠i t·∫•t c·∫£ y√™u c·∫ßu</Text>
          <Text style={styles.subtitle}>G·ª≠i {action.users.length} y√™u c·∫ßu thanh to√°n</Text>
        </View>

        <View style={styles.summaryCard}>
          <View style={styles.summaryHeader}>
            <Text style={styles.summaryTitle}>üìä T·ªïng quan</Text>
          </View>
          
          <View style={styles.summaryRow}>
            <Text style={styles.summaryLabel}>S·ªë ng∆∞·ªùi:</Text>
            <Text style={styles.summaryValue}>{action.users.length} ng∆∞·ªùi</Text>
          </View>
          
          <View style={styles.summaryRow}>
            <Text style={styles.summaryLabel}>T·ªïng ti·ªÅn:</Text>
            <Text style={[styles.summaryValue, styles.totalAmount]}>{formatMoney(totalAmount)}</Text>
          </View>
          
          <View style={styles.summaryRow}>
            <Text style={styles.summaryLabel}>M√¥ t·∫£:</Text>
            <Text style={styles.summaryValue}>{action.description}</Text>
          </View>
        </View>

        <View style={styles.participantsList}>
          <Text style={styles.participantsTitle}>üë• Danh s√°ch ng∆∞·ªùi thanh to√°n:</Text>
          <ScrollView style={styles.participantsScroll} showsVerticalScrollIndicator={false}>
            {action.users.map((req, index) => (
              <View key={index} style={styles.participantCard}>
                <View style={styles.participantInfo}>
                  <Text style={styles.participantName}>{req.user.fullName}</Text>
                  <Text style={styles.participantPhone}>{req.user.phone}</Text>
                </View>
                <Text style={styles.participantAmount}>{formatMoney(req.amount)}</Text>
              </View>
            ))}
          </ScrollView>
        </View>

        <View style={styles.buttonContainer}>
          <TouchableOpacity 
            style={[styles.button, styles.cancelButton]} 
            onPress={onClose}
          >
            <Text style={styles.cancelButtonText}>‚ùå H·ªßy</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.button, styles.confirmButton]} 
            onPress={() => {
              action.onConfirm();
              onClose();
            }}
          >
            <Text style={styles.confirmButtonText}>üöÄ G·ª≠i t·∫•t c·∫£</Text>
          </TouchableOpacity>
        </View>
      </Animated.View>
    );
  };

  const getTitle = () => {
    switch (action.type) {
      case 'single':
        return 'üí≥ G·ª≠i y√™u c·∫ßu thanh to√°n';
      case 'bulk':
        return 'üì§ G·ª≠i t·∫•t c·∫£ y√™u c·∫ßu';
      default:
        return 'üí∞ X√°c nh·∫≠n';
    }
  };

  return (
    <CustomModal
      visible={visible}
      title={getTitle()}
      onBackdropPress={onClose}
      showCloseButton={true}
    >
      {action.type === 'single' ? renderSinglePayment() : renderBulkPayment()}
    </CustomModal>
  );
};

interface SplitMoneyPopupProps {
  visible: boolean;
  totalAmount: number;
  selectedUsers: number;
  includeSelf: boolean;
  perPerson: number;
  onConfirm: () => void;
  onClose: () => void;
}

export const SplitMoneyPopup: React.FC<SplitMoneyPopupProps> = ({
  visible,
  totalAmount,
  selectedUsers,
  includeSelf,
  perPerson,
  onConfirm,
  onClose,
}) => {
  const formatMoney = (amount: number): string => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const totalPeople = selectedUsers + (includeSelf ? 1 : 0);

  return (
    <CustomModal
      visible={visible}
      title="‚ö° Chia ƒë·ªÅu t·ª± ƒë·ªông"
      onBackdropPress={onClose}
      showCloseButton={true}
    >
      <View style={styles.splitContainer}>
        <View style={styles.splitHeader}>
          <Text style={styles.splitTitle}>üí∞ Chia ti·ªÅn t·ª± ƒë·ªông</Text>
          <Text style={styles.splitSubtitle}>X√°c nh·∫≠n ph√¢n chia s·ªë ti·ªÅn</Text>
        </View>

        <View style={styles.splitCard}>
          <View style={styles.splitRow}>
            <Text style={styles.splitLabel}>T·ªïng s·ªë ti·ªÅn:</Text>
            <Text style={[styles.splitValue, styles.totalMoney]}>{formatMoney(totalAmount)}</Text>
          </View>
          
          <View style={styles.splitRow}>
            <Text style={styles.splitLabel}>S·ªë ng∆∞·ªùi tham gia:</Text>
            <Text style={styles.splitValue}>
              {totalPeople} ng∆∞·ªùi {includeSelf && '(bao g·ªìm b·∫°n)'}
            </Text>
          </View>
          
          <View style={styles.divider} />
          
          <View style={styles.splitRow}>
            <Text style={styles.splitLabel}>M·ªói ng∆∞·ªùi tr·∫£:</Text>
            <Text style={[styles.splitValue, styles.perPersonAmount]}>{formatMoney(perPerson)}</Text>
          </View>
        </View>

        <View style={styles.splitInfo}>
          <Text style={styles.splitInfoText}>
            {includeSelf 
              ? `‚úÖ B·∫°n c≈©ng s·∫Ω ƒë∆∞·ª£c t√≠nh v√†o danh s√°ch thanh to√°n v·ªõi s·ªë ti·ªÅn ${formatMoney(perPerson)}`
              : '‚ÑπÔ∏è B·∫°n s·∫Ω kh√¥ng ph·∫£i thanh to√°n (ch·ªâ l√† ng∆∞·ªùi t·∫°o y√™u c·∫ßu)'
            }
          </Text>
        </View>

        <View style={styles.buttonContainer}>
          <TouchableOpacity 
            style={[styles.button, styles.cancelButton]} 
            onPress={onClose}
          >
            <Text style={styles.cancelButtonText}>‚ùå H·ªßy</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.button, styles.confirmButton]} 
            onPress={() => {
              onConfirm();
              onClose();
            }}
          >
            <Text style={styles.confirmButtonText}>‚ö° Chia ƒë·ªÅu</Text>
          </TouchableOpacity>
        </View>
      </View>
    </CustomModal>
  );
};

export default AdminPopup;

// Styles moved to ../styles/components/AdminPopup.styles.ts